@using System.Net
@using RestaurantApp.Shared.Models
@inject HttpClient Http
<h3>OpeningHoursTab</h3>
<!-- Sekcja godzin otwarcia -->
<div class="edit-card">
    <h3 class="section-title">Opening Hours</h3>
    <div class="hours-grid">
        @foreach (var day in Enum.GetValues<DayOfWeek>())
        {
            var hours = GetOrCreateOpeningHours(day);
            <div class="hours-row">
                <div class="day-label">
                    @day
                </div>
                <div class="hours-controls">
                    @if (!hours.IsClosed)
                    {
                        <input type="time" class="time-input"
                               value="@hours.OpenTime.ToString("HH:mm")"
                               @onchange="(e) => {UpdateOpenTime(hours, e.Value?.ToString()); changesMade = true; }"/>
                        <span class="time-separator">-</span>
                        <input type="time" class="time-input"
                               value="@hours.CloseTime.ToString("HH:mm")"
                               @onchange="(e) => {UpdateCloseTime(hours, e.Value?.ToString()); changesMade = true; }" />
                    }
                    else
                    {
                        <span class="closed-label">Closed</span>
                    }
                    <button class="toggle-button @(hours.IsClosed ? "closed" : "open")"
                            @onclick="() => ToggleClosed(hours)">
                        @(hours.IsClosed ? "Set opening hours" : "Close for the Day")
                    </button>
                </div>
            </div>
        }
        @if (changesMade)
        {
            <div class="action-buttons">
                <button  @onclick="CancelChanges">Cancel</button>
                <button  @onclick="SaveChanges">
                    Save Changes
                </button>
            </div>
        }
    </div>
</div>
@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public Restaurant? restaurant { get; set; }
    private bool changesMade = false;
    
    protected override void OnInitialized()
    {
        if (restaurant.OpeningHours.Count != 7)
        {
            restaurant.OpeningHours.Clear();
            foreach (var day in Enum.GetValues<DayOfWeek>())
            {
                restaurant.OpeningHours.Add(new OpeningHours
                {
                    DayOfWeek = day,
                    OpenTime = new TimeOnly(10, 0),
                    CloseTime = new TimeOnly(22, 0),
                    IsClosed = day == DayOfWeek.Sunday,
                    RestaurantId = restaurant.Id
                });
            }
        }
    }
    
    private OpeningHours GetOrCreateOpeningHours(DayOfWeek day)
    {
        var hours = restaurant?.OpeningHours?.FirstOrDefault(h => h.DayOfWeek == day);
        if (hours == null && restaurant != null)
        {
            hours = new OpeningHours
            {
                DayOfWeek = day,
                OpenTime = new TimeOnly(10, 0),
                CloseTime = new TimeOnly(22, 0),
                RestaurantId = restaurant.Id
            };
            restaurant.OpeningHours ??= new List<OpeningHours>();
            restaurant.OpeningHours.Add(hours);
        }
        return hours!;
    }

    private void UpdateOpenTime(OpeningHours hours, string? timeString)
    {
        if (TimeOnly.TryParse(timeString, out var time))
        {
            hours.OpenTime = time;
        }
    }

    private void UpdateCloseTime(OpeningHours hours, string? timeString)
    {
        if (TimeOnly.TryParse(timeString, out var time))
        {
            hours.CloseTime = time;
        }
    }

    private void ToggleClosed(OpeningHours hours)
    {
        changesMade = true;
        hours.IsClosed = !hours.IsClosed;
    }

    private async Task CancelChanges()
    {
    }

    private async Task SaveChanges()
    {
        try
        {
            await Http.PatchAsJsonAsync($"api/restaurant/{Id}/opening-hours", restaurant.OpeningHours);
            changesMade = false;
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error adding table: {e.Message}");
        }
    }

}