@using System.Net
@using RestaurantApp.Shared.Models
@inject HttpClient Http

<div class="container mt-4">
    <div class="col d-flex justify-content-center">

        <div class="card-body">
            <div class="d-flex flex-column gap-3">
                @foreach (var day in Enum.GetValues<DayOfWeek>())
                {
                    var hours = GetOrCreateOpeningHours(day);
                    <div class="border rounded p-3 bg-light">
                        <div class="row align-items-center">

                            <div class="col-12 col-md-3 mb-2 mb-md-0">
                                <strong>@day</strong>
                            </div>

                            <div class="col-12 col-md-6 mb-2 mb-md-0">
                                @if (!hours.IsClosed)
                                {
                                    <div class="d-flex align-items-center gap-2">
                                        <input type="time"
                                               class="form-control form-control-sm"
                                               @bind="hours.OpenTime"
                                               @bind:format="HH:mm"
                                               @bind:after="() => changesMade = true"/>
                                        <span class="fw-bold">—</span>
                                        <input type="time"
                                               class="form-control form-control-sm"
                                               @bind="hours.CloseTime"
                                               @bind:format="HH:mm"
                                               @bind:after="() => changesMade = true"/>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex align-items-center justify-content-center gap-2">
                                        <span class="badge bg-secondary py-2 w-50">Closed</span>
                                    </div>
                                }
                            </div>

                            <div class="col-12 col-md-3">
                                <button class="w-100 @(hours.IsClosed ? "base-button" : "grey-button")"
                                        @onclick="() => ToggleClosed(hours)">
                                    @(hours.IsClosed ? "Open" : "Close")
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            @if (changesMade)
            {
                <div class="mt-4 d-flex justify-content-center gap-2">
                    <button class="base-button" @onclick="SaveChanges">
                        <i class="bi bi-arrow-down-right-circle me-2"></i> Save
                    </button>
                    <button class="grey-button" @onclick="CancelChanges">
                        Cancel
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public required Restaurant restaurant { get; set; }
    private Restaurant modifiedRestaurant = new Restaurant();
    private bool changesMade = false;

    protected override void OnInitialized()
    {
        InitializeOpeningHours();
    }

    private void InitializeOpeningHours()
    {
        modifiedRestaurant = new Restaurant
        {
            Id = restaurant.Id,
            OpeningHours = new List<OpeningHours>()
        };

        if (restaurant.OpeningHours?.Count == 7)
        {
            foreach (var originalHours in restaurant.OpeningHours)
            {
                modifiedRestaurant.OpeningHours.Add(new OpeningHours
                {
                    DayOfWeek = originalHours.DayOfWeek,
                    OpenTime = originalHours.OpenTime,
                    CloseTime = originalHours.CloseTime,
                    IsClosed = originalHours.IsClosed,
                    RestaurantId = restaurant.Id
                });
            }
        }
        else
        {
            foreach (var day in Enum.GetValues<DayOfWeek>())
            {
                modifiedRestaurant.OpeningHours.Add(new OpeningHours
                {
                    DayOfWeek = day,
                    OpenTime = new TimeOnly(10, 0),
                    CloseTime = new TimeOnly(22, 0),
                    IsClosed = day == DayOfWeek.Sunday,
                    RestaurantId = restaurant.Id
                });
            }
        }
    }

    private OpeningHours GetOrCreateOpeningHours(DayOfWeek day)
    {
        var hours = modifiedRestaurant?.OpeningHours?.FirstOrDefault(h => h.DayOfWeek == day);
        if (hours == null && modifiedRestaurant != null)
        {
            hours = new OpeningHours
            {
                DayOfWeek = day,
                OpenTime = new TimeOnly(10, 0),
                CloseTime = new TimeOnly(22, 0),
                RestaurantId = modifiedRestaurant.Id
            };
            modifiedRestaurant.OpeningHours ??= new List<OpeningHours>();
            modifiedRestaurant.OpeningHours.Add(hours);
        }

        return hours!;
    }

    private void ToggleClosed(OpeningHours hours)
    {
        changesMade = true;
        hours.IsClosed = !hours.IsClosed;
    }

    private void CancelChanges()
    {
        changesMade = false;
        InitializeOpeningHours();
    }

    private async Task SaveChanges()
    {
        try
        {
            await Http.PatchAsJsonAsync($"api/restaurant/{Id}/opening-hours", modifiedRestaurant.OpeningHours);

            restaurant.OpeningHours = modifiedRestaurant.OpeningHours.Select(h => new OpeningHours
            {
                DayOfWeek = h.DayOfWeek,
                OpenTime = h.OpenTime,
                CloseTime = h.CloseTime,
                IsClosed = h.IsClosed,
                RestaurantId = h.RestaurantId
            }).ToList();

            changesMade = false;
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error saving opening hours: {e.Message}");
        }
    }

}