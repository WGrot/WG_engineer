@using RestaurantApp.Blazor.Models.Response
@using RestaurantApp.Shared.Models
@using System.Net.Http.Json
@using RestaurantApp.Blazor.Models.DTO
@using RestaurantApp.Shared.DTOs
@inject HttpClient Http

@if (IsVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Zarządzaj uprawnieniami - @Employee?.FirstName @Employee?.LastName</h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">@successMessage</div>
                    }
                    
                    @if (isLoadingPermissions)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Ładowanie uprawnień...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="mb-4">
                            <h6>Informacje o pracowniku</h6>
                            <div class="card">
                                <div class="card-body">
                                    <p class="mb-1"><strong>Imię i nazwisko:</strong> @Employee?.FirstName @Employee?.LastName</p>
                                    <p class="mb-1"><strong>Email:</strong> @Employee?.Email</p>
                                    <p class="mb-1"><strong>Telefon:</strong> @Employee?.PhoneNumber</p>
                                    <p class="mb-0"><strong>Obecna rola:</strong> 
                                        <span class="badge bg-primary">@currentRole</span>
                                    </p>
                                </div>
                            </div>
                        </div>

                        <div class="mb-4">
                            <h6>Zmień rolę</h6>
                            <select class="form-control" @bind="selectedRole">
                                @foreach (var role in Enum.GetValues<RestaurantRole>())
                                {
                                    <option value="@role" selected="@(role == currentRole)">@role</option>
                                }
                            </select>
                        </div>

                        <div class="mb-4">
                            <h6>Szczegółowe uprawnienia</h6>
                            <div class="card">
                                <div class="card-body">
                                    @foreach (var permission in Enum.GetValues<PermissionType>())
                                    {
                                        <div class="form-check form-switch mb-2">
                                            <input class="form-check-input" 
                                                   type="checkbox" 
                                                   id="permission-@permission"
                                                   checked="@selectedPermissions.Contains(permission)"
                                                   @onchange="@((ChangeEventArgs e) => TogglePermission(permission, e))">
                                            <label class="form-check-label" for="permission-@permission">
                                                @GetPermissionDisplayName(permission)
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="mb-4">
                            <h6>Dodatkowe opcje</h6>
                            <div class="card">
                                <div class="card-body">
                                    <div class="form-check form-switch mb-2">
                                        <input class="form-check-input" type="checkbox" @bind="isActive" id="isActive">
                                        <label class="form-check-label" for="isActive">
                                            Konto aktywne
                                        </label>
                                    </div>
                                    <button type="button" class="btn btn-warning btn-sm mt-2" @onclick="ResetPassword">
                                        <i class="bi bi-key"></i> Resetuj hasło
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm mt-2 ms-2" @onclick="SetPermissionsByRole">
                                        <i class="bi bi-arrow-clockwise"></i> Przywróć domyślne dla roli
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Close">Anuluj</button>
                    <button type="button" class="btn btn-primary" @onclick="SavePermissions" disabled="@(isSaving || isLoadingPermissions)">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <span>Zapisywanie...</span>
                        }
                        else
                        {
                            <span>Zapisz zmiany</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public ResponseRestaurantEmployeeDto? Employee { get; set; }
    [Parameter] public int RestaurantId { get; set; }
    [Parameter] public EventCallback OnPermissionsUpdated { get; set; }
    
    private bool isSaving = false;
    private bool isLoadingPermissions = false;
    private string? errorMessage;
    private string? successMessage;
    
    // Role and permissions
    private RestaurantRole currentRole = RestaurantRole.Employee;
    private RestaurantRole selectedRole = RestaurantRole.Employee;
    private HashSet<PermissionType> selectedPermissions = new HashSet<PermissionType>();
    private bool isActive = true;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && Employee != null)
        {
            await LoadPermissions();
        }
    }

    private async Task LoadPermissions()
    {
        isLoadingPermissions = true;
        errorMessage = null;
        
        try
        {
            var permissionsResponse = await Http.GetFromJsonAsync<List<RestaurantPermission>>($"api/Permissions/employee/{Employee.Id}/");
            
            // Przykładowe dane - zastąp danymi z API
            currentRole = Employee.Role;
            selectedRole = currentRole;
            isActive = Employee.IsActive;
            selectedPermissions.Clear();
            
            foreach (RestaurantPermission permission in permissionsResponse)
            {
                selectedPermissions.Add(permission.Permission);
            }
            
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd podczas ładowania uprawnień: {ex.Message}";
            Console.WriteLine($"Error loading permissions: {ex}");
        }
        finally
        {
            isLoadingPermissions = false;
        }
    }

    private void TogglePermission(PermissionType permission, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            if (isChecked)
            {
                selectedPermissions.Add(permission);
            }
            else
            {
                selectedPermissions.Remove(permission);
            }
        }
    }

    private string GetPermissionDisplayName(PermissionType permission)
    {
        return permission switch
        {
            PermissionType.ViewReservations => "View Reservations",
            PermissionType.ManageReservations => "Manage Reservations",
            PermissionType.ManageTables => "Manage Tables",
            PermissionType.ManageMenu => "Manage Menu",
            PermissionType.ManageEmployees => "Manage Employees",
            PermissionType.ViewReports => "View Reports",
            PermissionType.ManageRestaurantSettings => "Manage Restaurant Settings",
            PermissionType.ManageFinances => "Manage Finances",
            _ => permission.ToString()
        };
    }
    

    private void SetPermissionsByRole()
    {
        selectedPermissions.Clear();
        
        // Domyślne uprawnienia dla każdej roli
        switch (selectedRole)
        {
            case RestaurantRole.Owner:
                // Właściciel ma wszystkie uprawnienia
                foreach (var permission in Enum.GetValues<PermissionType>())
                {
                    selectedPermissions.Add(permission);
                }
                break;
                
            case RestaurantRole.Manager:
                // Manager ma większość uprawnień oprócz finansów
                selectedPermissions.Add(PermissionType.ViewReservations);
                selectedPermissions.Add(PermissionType.ManageReservations);
                selectedPermissions.Add(PermissionType.ManageTables);
                selectedPermissions.Add(PermissionType.ManageMenu);
                selectedPermissions.Add(PermissionType.ManageEmployees);
                selectedPermissions.Add(PermissionType.ViewReports);
                selectedPermissions.Add(PermissionType.ManageRestaurantSettings);
                break;
                
            case RestaurantRole.Employee:
                // Pracownik ma podstawowe uprawnienia
                selectedPermissions.Add(PermissionType.ViewReservations);
                selectedPermissions.Add(PermissionType.ManageReservations);
                break;
                
            default:
                // Brak uprawnień
                break;
        }
    }

    private async Task SavePermissions()
    {
        if (Employee == null) return;
        
        isSaving = true;
        errorMessage = null;
        successMessage = null;
        
        try
        {

            var updatePermissionsDto = new UpdateEmployeePermisionsDto
            {
                EmployeeId = Employee.Id,
                RestaurantId = RestaurantId,
                Permissions = selectedPermissions.ToList()
            };

             var response = await Http.PutAsJsonAsync($"api/Permissions/employee/update-permissions", updatePermissionsDto);
             
            
             if (response.IsSuccessStatusCode)
            {
                successMessage = "Uprawnienia zostały zaktualizowane pomyślnie!";
                currentRole = selectedRole;
                
                // Notify parent component
                await OnPermissionsUpdated.InvokeAsync();
                
                // Auto-close modal after 2 seconds
                await Task.Delay(2000);
                await Close();
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                errorMessage = $"Błąd podczas aktualizacji uprawnień: {errorResponse}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd: {ex.Message}";
            Console.WriteLine($"Error saving permissions: {ex}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ResetPassword()
    {
        if (Employee == null) return;
        
        try
        {
            errorMessage = null;
            successMessage = null;
            
            // TODO: Zastąp rzeczywistym API call
            // var response = await Http.PostAsync($"api/Employees/{Employee.Id}/reset-password", null);
            
            // Symulacja resetowania hasła
            await Task.Delay(500);
            
            // if (response.IsSuccessStatusCode)
            // {
                successMessage = $"Hasło zostało zresetowane. Nowe hasło zostało wysłane na adres {Employee.Email}";
            // }
            // else
            // {
            //     errorMessage = "Błąd podczas resetowania hasła";
            // }
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd podczas resetowania hasła: {ex.Message}";
            Console.WriteLine($"Error resetting password: {ex}");
        }
    }

    private async Task Close()
    {
        ClearForm();
        await IsVisibleChanged.InvokeAsync(false);
    }

    private void ClearForm()
    {
        errorMessage = null;
        successMessage = null;
        isSaving = false;
        isLoadingPermissions = false;
        selectedPermissions.Clear();
    }
}