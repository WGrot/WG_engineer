@using RestaurantApp.Blazor.Models.Response
@using RestaurantApp.Shared.Models
@using System.Net.Http.Json
@using RestaurantApp.Blazor.Models.DTO
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>RestaurantEmployeesTab</h3>

<button @onclick="OpenModal" class="btn btn-primary mb-3">Add new employee</button>

@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Dodaj nowego pracownika</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(modalError))
                    {
                        <div class="alert alert-danger">@modalError</div>
                    }
                    @if (!string.IsNullOrEmpty(modalSuccess))
                    {
                        <div class="alert alert-success">@modalSuccess</div>
                    }
                    
                    <div class="mb-3">
                        <label class="form-label">Imię</label>
                        <input type="text" class="form-control" @bind="firstName" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Nazwisko</label>
                        <input type="text" class="form-control" @bind="lastName" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" @bind="email" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Telefon</label>
                        <input type="tel" class="form-control" @bind="phoneNumber" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Rola</label>
                        <select class="form-control" @bind="selectedRole">
                            <option value="">-- Wybierz rolę --</option>
                            @foreach (var role in Enum.GetValues<RestaurantRole>())
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Anuluj</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveEmployee" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <span>Zapisywanie...</span>
                        }
                        else
                        {
                            <span>Zapisz</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (isLoading)
{
    <p>Loading employees...</p>
}
else if (error != null)
{
    <p>Error: @error</p>
}
else if (employees == null || !employees.Any())
{
    <p>You don't have any employees yet.</p>
}
else
{
    <ul class="list-unstyled">
        @foreach (var employee in employees)
        {
            <li>
                <div>
                    <strong>@employee.LastName @employee.FirstName</strong><br/>
                    Email: @employee.Email<br/>
                    PhoneNumber: @employee.PhoneNumber<br/>
                </div>
                <hr/>
            </li>
        }
    </ul>
}

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public Restaurant? restaurant { get; set; }
    
    private bool isLoading = true;
    private string? error;
    private List<ResponseRestaurantEmployeeDto> employees = new List<ResponseRestaurantEmployeeDto>();
    
    // Modal fields
    private bool showModal = false;
    private bool isSaving = false;
    private string firstName = "";
    private string lastName = "";
    private string email = "";
    private string phoneNumber = "";
    private RestaurantRole? selectedRole = null;
    private string? modalError;
    private string? modalSuccess;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }
    
    private async Task LoadEmployees()
    {
        try
        {
            employees = await Http.GetFromJsonAsync<List<ResponseRestaurantEmployeeDto>>($"api/Employees/restaurant/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading employees: {ex.Message}");
            error = "Failed to load employees";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void OpenModal()
    {
        showModal = true;
        modalError = null;
        modalSuccess = null;
    }

    private void CloseModal()
    {
        showModal = false;
        // Clear form
        firstName = "";
        lastName = "";
        email = "";
        phoneNumber = "";
        selectedRole = null;
        modalError = null;
        modalSuccess = null;
        isSaving = false;
    }

    private async Task SaveEmployee()
    {
        // Validation
        if (string.IsNullOrWhiteSpace(firstName) || 
            string.IsNullOrWhiteSpace(lastName) || 
            string.IsNullOrWhiteSpace(email))
        {
            modalError = "Proszę wypełnić wszystkie wymagane pola (Imię, Nazwisko, Email, Hasło)";
            return;
        }

        if (!selectedRole.HasValue)
        {
            modalError = "Proszę wybrać rolę pracownika";
            return;
        }

        isSaving = true;
        modalError = null;
        modalSuccess = null;

        try
        {
            var createUserDto = new CreateUserDto
            {
                FirstName = firstName,
                LastName = lastName,
                Email = email,
                PhoneNumber = phoneNumber,
                Password = "",
                RestaurantId = Id,
                Role = selectedRole.Value
            };

            var response = await Http.PostAsJsonAsync("api/User", createUserDto);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CreateUserResponse>();
                modalSuccess = $"Pracownik został dodany pomyślnie! Email: {result?.Email}";
                
                // Reload employees list
                await LoadEmployees();
                
                // Clear form after successful save
                firstName = "";
                lastName = "";
                email = "";
                phoneNumber = "";
                selectedRole = null;
                
                // Auto-close modal after 2 seconds
                await Task.Delay(2000);
                CloseModal();
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                modalError = $"Błąd podczas dodawania pracownika: {errorResponse}";
            }
        }
        catch (Exception ex)
        {
            modalError = $"Wystąpił błąd: {ex.Message}";
            Console.WriteLine($"Error saving employee: {ex}");
        }
        finally
        {
            isSaving = false;
        }
    }
    
}