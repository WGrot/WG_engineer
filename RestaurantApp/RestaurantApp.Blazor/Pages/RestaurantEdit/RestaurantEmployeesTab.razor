@using RestaurantApp.Blazor.Models.Response
@using RestaurantApp.Shared.Models
@using System.Net.Http.Json
@using RestaurantApp.Blazor.Models.DTO
@using RestaurantApp.Blazor.Components
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>RestaurantEmployeesTab</h3>

<button @onclick="OpenAddEmployeeModal" class="btn btn-primary mb-3">Add new employee</button>

<!-- Wydzielony modal komponent -->
<AddEmployeeModal 
    @bind-IsVisible="showAddEmployeeModal" 
    RestaurantId="Id"
    OnEmployeeAdded="HandleEmployeeAdded"
    Title="Dodaj nowego pracownika" />

<GenericModal @bind-IsVisible="showSuccessModal"
              Title="Pracownik dodany pomyślnie!"
              Size="GenericModal.ModalSize.Small">
    <ChildContent>
        @if (newEmployeeResponse != null)
        {
            <div class="text-center">
                <i class="bi bi-check-circle-fill text-success" style="font-size: 3rem;"></i>
                <div class="mt-3">
                    <p class="mb-2"><strong>Employee account created</strong></p>
                    <p class="mb-1">Email: <strong>@newEmployeeResponse.Email</strong></p>
                    @if (!string.IsNullOrEmpty(newEmployeeResponse.Password))
                    {
                        <div class="alert alert-warning mt-3">
                            <small>Temporary password:</small><br/>
                            <code>@newEmployeeResponse.Password</code><br/>
                            <small class="text-muted">The e-mail with additional info was sent to employee inbox</small>
                        </div>
                    }
                </div>
            </div>
        }
    </ChildContent>
    <FooterContent>
        <button class="btn btn-primary" @onclick="() => showSuccessModal = false">OK</button>
    </FooterContent>
</GenericModal>

@if (isLoading)
{
    <p>Loading employees...</p>
}
else if (error != null)
{
    <p>Error: @error</p>
}
else if (employees == null || !employees.Any())
{
    <p>You don't have any employees yet.</p>
}
else
{
    <ul class="list-unstyled">
        @foreach (var employee in employees)
        {
            <li>
                <div>
                    <strong>@employee.LastName @employee.FirstName</strong><br/>
                    Email: @employee.Email<br/>
                    PhoneNumber: @employee.PhoneNumber<br/>
                </div>
                <hr/>
            </li>
        }
    </ul>
}

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public Restaurant? restaurant { get; set; }
    
    private bool isLoading = true;
    private string? error;
    private List<ResponseRestaurantEmployeeDto> employees = new List<ResponseRestaurantEmployeeDto>();
    
    // Modal visibility states
    private bool showAddEmployeeModal = false;
    private bool showSuccessModal = false;
    private CreateUserResponse? newEmployeeResponse;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }
    
    private async Task LoadEmployees()
    {
        try
        {
            employees = await Http.GetFromJsonAsync<List<ResponseRestaurantEmployeeDto>>($"api/Employees/restaurant/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading employees: {ex.Message}");
            error = "Failed to load employees";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void OpenAddEmployeeModal()
    {
        showAddEmployeeModal = true;
    }
    
    

    private async Task HandleEmployeeAdded(CreateUserResponse response)
    {
        // Reload employees list after new employee is added
        await LoadEmployees();
        newEmployeeResponse = response;
        showSuccessModal = true;
    }
}