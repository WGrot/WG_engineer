@using RestaurantApp.Blazor.Models.Response
@using RestaurantApp.Shared.Models
@using System.Net.Http.Json
@using RestaurantApp.Blazor.Models.DTO
@using RestaurantApp.Blazor.Components
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>RestaurantEmployeesTab</h3>

<button @onclick="OpenAddEmployeeModal" class="btn btn-primary mb-3">Add new employee</button>

<!-- Modal dodawania pracownika -->
<AddEmployeeModal
    @bind-IsVisible="showAddEmployeeModal"
    RestaurantId="Id"
    OnEmployeeAdded="HandleEmployeeAdded"
    Title="Dodaj nowego pracownika" />

<!-- Modal zarządzania uprawnieniami -->
<ManagePermissionsModal
    @bind-IsVisible="showPermissionsModal"
    Employee="selectedEmployee"
    RestaurantId="Id"
    OnPermissionsUpdated="HandlePermissionsUpdated" />

<GenericModal @bind-IsVisible="showSuccessModal"
              Title="Pracownik dodany pomyślnie!"
              Size="GenericModal.ModalSize.Small">
    <ChildContent>
        @if (newEmployeeResponse != null)
        {
            <div class="text-center">
                <i class="bi bi-check-circle-fill text-success" style="font-size: 3rem;"></i>
                <div class="mt-3">
                    <p class="mb-2"><strong>Employee account created</strong></p>
                    <p class="mb-1">Email: <strong>@newEmployeeResponse.Email</strong></p>
                    @if (!string.IsNullOrEmpty(newEmployeeResponse.Password))
                    {
                        <div class="alert alert-warning mt-3">
                            <small>Temporary password:</small><br/>
                            <code>@newEmployeeResponse.Password</code><br/>
                            <small class="text-muted">The e-mail with additional info was sent to employee inbox</small>
                        </div>
                    }
                </div>
            </div>
        }
    </ChildContent>
    <FooterContent>
        <button class="btn btn-primary" @onclick="() => showSuccessModal = false">OK</button>
    </FooterContent>
</GenericModal>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading employees...</span>
        </div>
    </div>
}
else if (error != null)
{
    <div class="alert alert-danger">
        <i class="bi bi-exclamation-triangle-fill"></i> Error: @error
    </div>
}
else if (employees == null || !employees.Any())
{
    <div class="alert alert-info">
        <i class="bi bi-info-circle-fill"></i> You don't have any employees yet.
    </div>
}
else
{
    <div class="row">
        @foreach (var employee in employees)
        {
            <div class="col-md-6 col-lg-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-person-fill"></i> @employee.FirstName @employee.LastName
                        </h5>
                        <div class="card-text">
                            <p class="mb-1">
                                <i class="bi bi-envelope"></i>
                                <small>@employee.Email</small>
                            </p>
                            <p class="mb-2">
                                <i class="bi bi-telephone"></i>
                                <small>@(employee.PhoneNumber ?? "No phone number")</small>
                            </p>
                            @if (!string.IsNullOrEmpty(employee.Role.ToString()))
                            {
                                <p class="mb-2">
                                    <span class="badge bg-secondary">@employee.Role</span>
                                </p>
                            }
                        </div>
                        <div class="d-flex gap-2">
                            <button class="btn btn-sm btn-outline-primary flex-fill"
                                    @onclick="() => OpenPermissionsModal(employee)">
                                <i class="bi bi-shield-lock"></i> Manage Permissions
                            </button>
                            <button class="btn btn-sm btn-outline-danger"
                                    @onclick="() => RemoveEmployee(employee)"
                                    title="Delete Employee">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public Restaurant? restaurant { get; set; }

    private bool isLoading = true;
    private string? error;
    private List<ResponseRestaurantEmployeeDto> employees = new List<ResponseRestaurantEmployeeDto>();

    // Modal visibility states
    private bool showAddEmployeeModal = false;
    private bool showSuccessModal = false;
    private bool showPermissionsModal = false;

    // Selected data
    private CreateUserResponse? newEmployeeResponse;
    private ResponseRestaurantEmployeeDto? selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        isLoading = true;
        error = null;

        try
        {
            employees = await Http.GetFromJsonAsync<List<ResponseRestaurantEmployeeDto>>($"api/Employees/restaurant/{Id}")
                        ?? new List<ResponseRestaurantEmployeeDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading employees: {ex.Message}");
            error = "Failed to load employees";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenAddEmployeeModal()
    {
        showAddEmployeeModal = true;
    }

    private void OpenPermissionsModal(ResponseRestaurantEmployeeDto employee)
    {
        selectedEmployee = employee;
        showPermissionsModal = true;
    }

    private async Task HandleEmployeeAdded(CreateUserResponse response)
    {
        // Reload employees list after new employee is added
        await LoadEmployees();
        newEmployeeResponse = response;
        showSuccessModal = true;
    }

    private async Task HandlePermissionsUpdated()
    {
        // Reload employees list after permissions are updated
        await LoadEmployees();
    }

    private async Task RemoveEmployee(ResponseRestaurantEmployeeDto employee)
    {
        // TODO: Dodaj potwierdzenie przed usunięciem
        if (!await ConfirmRemoval(employee))
            return;

        try
        {
            // TODO: Zastąp rzeczywistym API call
            // var response = await Http.DeleteAsync($"api/Employees/{employee.Id}");

            // Symulacja usuwania
            await Task.Delay(500);

            // if (response.IsSuccessStatusCode)
            // {
            await LoadEmployees();
            // }
            // else
            // {
            //     error = "Nie udało się usunąć pracownika";
            // }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing employee: {ex.Message}");
            error = "Wystąpił błąd podczas usuwania pracownika";
        }
    }

    private async Task<bool> ConfirmRemoval(ResponseRestaurantEmployeeDto employee)
    {
        // TODO: Implementacja rzeczywistego dialogu potwierdzenia
        // Na razie zwracamy false aby zapobiec przypadkowemu usunięciu
        return false;

        // Przykład implementacji z użyciem JavaScript interop:
        // return await JSRuntime.InvokeAsync<bool>("confirm", 
        //     $"Czy na pewno chcesz usunąć pracownika {employee.FirstName} {employee.LastName}?");
    }
}