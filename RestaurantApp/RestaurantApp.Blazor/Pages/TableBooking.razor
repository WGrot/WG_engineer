@page "/booking/table/{restaurantId:int}"
@using RestaurantApp.Shared.Models
@using System.Net.Http.Json
@using RestaurantApp.Blazor.Models.DTO
@using RestaurantApp.Shared.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="booking-container">
    <h1>Book a Table</h1>

    @if (isLoadingRestaurant)
    {
        <p>Loading restaurant details...</p>
    }
    else if (restaurant == null)
    {
        <div class="error">
            <h2>Restaurant not found</h2>
            <button @onclick="GoBack">Go Back</button>
        </div>
    }
    else
    {
        <h2>@restaurant.Name</h2>
        <p>@restaurant.Address</p>

        <div class="booking-form">
            <div class="form-group">
                <label for="date">Select Date:</label>
                <input type="date" id="date" @bind="selectedDate" @bind:event="oninput" @onchange="OnDateTimeChanged" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
            </div>

            <div class="form-group">
                <label for="startTime">Start Time:</label>
                <input type="time" id="startTime" @bind="startTime" @bind:event="oninput" @onchange="OnDateTimeChanged" />
            </div>

            <div class="form-group">
                <label for="endTime">End Time:</label>
                <input type="time" id="endTime" @bind="endTime" @bind:event="oninput" min="@(startTime?.ToString("HH:mm"))" />
            </div>

            <div class="form-group">
                <label for="guests">Number of Guests:</label>
                <input type="number" id="guests" @bind="numberOfGuests" min="1" max="20" />
            </div>

            @if (selectedDate != null && startTime != null && endTime != null)
            {
                <button @onclick="CheckAvailability" disabled="@isCheckingAvailability">
                    @if (isCheckingAvailability)
                    {
                        <span>Checking...</span>
                    }
                    else
                    {
                        <span>Check Available Tables</span>
                    }
                </button>
            }

            @if (availableTables != null)
            {
                <div class="available-tables">
                    <h3>Available Tables</h3>
                    @if (!availableTables.Any())
                    {
                        <p>No tables available for selected date and time. Please try different time.</p>
                    }
                    else
                    {
                        <div class="tables-grid">
                            @foreach (var table in availableTables.OrderBy(t => t.TableNumber))
                            {
                                <div class="table-card @(selectedTableId == table.Id ? "selected" : "")" @onclick="() => SelectTable(table.Id)">
                                    <h4>Table @table.TableNumber</h4>
                                    <p>Capacity: @table.Capacity guests</p>
                                    @if (!string.IsNullOrEmpty(table.Location))
                                    {
                                        <p>Location: @table.Location</p>
                                    }
                                </div>
                            }
                        </div>

                        @if (selectedTableId > 0)
                        {
                            @if (currentUser == null) 
                            {
                                <div class="customer-info">
                                    <h3>Customer Information</h3>
                                    <div class="form-group">
                                        <label for="name">Name:</label>
                                        <input type="text" id="name" @bind="customerName" placeholder="Your name" />
                                    </div>
                                    <div class="form-group">
                                        <label for="email">Email:</label>
                                        <input type="email" id="email" @bind="customerEmail" placeholder="your.email@example.com" />
                                    </div>
                                    <div class="form-group">
                                        <label for="phone">Phone:</label>
                                        <input type="tel" id="phone" @bind="customerPhone" placeholder="+48 123 456 789" />
                                    </div>
                                    <div class="form-group">
                                        <label for="notes">Special Requests (optional):</label>
                                        <textarea id="notes" @bind="specialRequests" rows="3"></textarea>
                                    </div>
                                </div> 
                            }
                            
                            @if (!string.IsNullOrEmpty(customerName) && !string.IsNullOrEmpty(customerEmail) && !string.IsNullOrEmpty(customerPhone) || currentUser != null)
                            {
                                <button @onclick="MakeReservation" disabled="@isSubmitting" class="submit-btn">
                                    @if (isSubmitting)
                                    {
                                        <span>Processing...</span>
                                    }
                                    else
                                    {
                                        <span>Confirm Reservation</span>
                                    }
                                </button>
                            }
                        }
                    }
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    <p>@errorMessage</p>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="success-message">
                    <p>@successMessage</p>
                </div>
            }
        </div>

        <div class="actions">
            <button @onclick="GoBack">Back to Restaurant</button>
        </div>
    }
</div>


@code {
    [Parameter] public int RestaurantId { get; set; }

    private Restaurant? restaurant;
    private List<Table>? allTables;
    private List<Table>? availableTables;

    private DateTime? selectedDate = DateTime.Now.Date;
    private DateTime? startTime;
    private DateTime? endTime;
    private int numberOfGuests = 2;
    private int selectedTableId = 0;
    ResponseUserDto? currentUser = new ResponseUserDto();

    private string customerName = "";
    private string customerEmail = "";
    private string customerPhone = "";
    private string specialRequests = "";
    private string userId = "";

    private bool isLoadingRestaurant = false;
    private bool isCheckingAvailability = false;
    private bool isSubmitting = false;

    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadRestaurantData();
        currentUser = await Http.GetFromJsonAsync<ResponseUserDto>($"api/Auth/me");
    }

    private async Task LoadRestaurantData()
    {
        try
        {
            isLoadingRestaurant = true;
            restaurant = await Http.GetFromJsonAsync<Restaurant>($"api/Restaurant/{RestaurantId}");
            allTables = await Http.GetFromJsonAsync<List<Table>>($"api/Table/restaurant/{RestaurantId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading restaurant data: {ex.Message}");
            restaurant = null;
        }
        finally
        {
            isLoadingRestaurant = false;
        }
    }

    private void OnDateTimeChanged()
    {
        // Reset available tables when date/time changes
        availableTables = null;
        selectedTableId = 0;
        errorMessage = "";
        successMessage = "";
    }

    private async Task CheckAvailability()
    {
        if (selectedDate == null || startTime == null || endTime == null || allTables == null)
            return;

        try
        {
            isCheckingAvailability = true;
            errorMessage = "";
            successMessage = "";

            // Validate end time is after start time
            if (endTime <= startTime)
            {
                errorMessage = "End time must be after start time.";
                availableTables = new List<Table>();
                return;
            }

            // Create TimeOnly from DateTime
            var startTimeOnly = TimeOnly.FromDateTime(startTime.Value);
            var endTimeOnly = TimeOnly.FromDateTime(endTime.Value);

            // Check if the restaurant is open at this time
            var dayOfWeek = selectedDate.Value.DayOfWeek;
            var openingHours = restaurant?.OpeningHours?.FirstOrDefault(h => h.DayOfWeek == dayOfWeek);

            if (openingHours != null && openingHours.IsClosed)
            {
                errorMessage = "Restaurant is closed on this day.";
                availableTables = new List<Table>();
                return;
            }

            if (openingHours != null && (startTimeOnly < openingHours.OpenTime || endTimeOnly > openingHours.CloseTime))
            {
                errorMessage = $"Restaurant is open from {openingHours.OpenTime:HH:mm} to {openingHours.CloseTime:HH:mm} on {dayOfWeek}.";
                availableTables = new List<Table>();
                return;
            }

            // Check each table for availability
            var availableTablesList = new List<Table>();

            foreach (var table in allTables.Where(t => t.Capacity >= numberOfGuests))
            {
                var isAvailable = await IsTableAvailable(table.Id, selectedDate.Value, startTimeOnly, endTimeOnly);
                if (isAvailable)
                {
                    availableTablesList.Add(table);
                }
            }

            availableTables = availableTablesList;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error checking availability: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isCheckingAvailability = false;
        }
    }

    private async Task<bool> IsTableAvailable(int tableId, DateTime date, TimeOnly startTime, TimeOnly endTime)
    {
        try
        {
            var reservations = await Http.GetFromJsonAsync<List<ReservationBase>>($"api/Reservation/reservation/table/{tableId}");

            if (reservations == null || !reservations.Any())
                return true;

            // Check if there's any overlapping reservation on the same date
            foreach (var reservation in reservations)
            {
                // Skip cancelled reservations
                if (reservation.Status == ReservationStatus.Cancelled)
                    continue;

                // Check if it's the same date
                if (reservation.ReservationDate.Date != date.Date)
                    continue;

                // Check for time overlap
                if (startTime < reservation.EndTime && endTime > reservation.StartTime)
                {
                    return false; // Table is not available
                }
            }

            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking table {tableId} availability: {ex.Message}");
            return false;
        }
    }

    private void SelectTable(int tableId)
    {
        selectedTableId = tableId;
    }

    private async Task MakeReservation()
    {
        if (selectedTableId <= 0 || selectedDate == null || startTime == null || endTime == null)
            return;
        
        try
        {
            isSubmitting = true;
            errorMessage = "";
            successMessage = "";

            if (currentUser != null)
            {
                customerName = $"{currentUser.FirstName} {currentUser.LastName}";
                customerEmail = currentUser.Email;
                customerPhone = currentUser.PhoneNumber ?? "";
                userId = currentUser.Id;
            }

            var reservation = new TableReservation
            {
                TableId = selectedTableId,
                RestaurantId = RestaurantId,
                CustomerName = customerName,
                CustomerEmail = customerEmail,
                CustomerPhone = customerPhone,
                ReservationDate = DateTime.SpecifyKind(selectedDate.Value, DateTimeKind.Utc),
                StartTime = TimeOnly.FromDateTime(startTime.Value),
                EndTime = TimeOnly.FromDateTime(endTime.Value),
                NumberOfGuests = numberOfGuests,
                Notes = specialRequests,
                Status = ReservationStatus.Pending,
                UserId = userId // This should be replaced with actual user ID from authentication
            };

            var response = await Http.PostAsJsonAsync("api/Reservation/table", reservation);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Reservation confirmed! You will receive a confirmation email shortly.";

                // Clear form after successful reservation
                await Task.Delay(2000);
                Navigation.NavigateTo($"/restaurant/{RestaurantId}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to make reservation: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error making reservation: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/restaurant/{RestaurantId}");
    }
}