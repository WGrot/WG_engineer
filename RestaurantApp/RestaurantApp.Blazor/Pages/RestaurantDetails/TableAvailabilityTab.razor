@using RestaurantApp.Shared.Models
@using System.Net.Http.Json
@using RestaurantApp.Blazor.Models.DTO
@using RestaurantApp.Shared.DTOs
@using RestaurantApp.Blazor.Pages.RestaurantDetails
@using RestaurantApp.Blazor.Components
@using RestaurantApp.Blazor.Services
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="booking-container">
    @if (isLoadingRestaurant)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading...</p>
        </div>
    }
    else if (restaurant == null)
    {
        <div class="error">
            <h2>Restaurant not found</h2>
            <button @onclick="GoBack">Go Back</button>
        </div>
    }
    else
    {
        <div class="container mt-4">
            <div class="row justify-content-evenly">
                <!-- Messages Section -->
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                        <i class="bi bi-x-circle-fill me-2"></i>
                        <strong>Error!</strong> @errorMessage
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                        <i class="bi bi-check-circle-fill me-2"></i>
                        <strong>Success!</strong> @successMessage
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
                <div class="col-lg-8 col-12 w-100">
                    <div>

                        <div class="text-center w-100">
                            <h3 class="mb-3">Check table availability at @restaurant.Name</h3>
                        </div>

                        <div class>
                            <div class="row mb-4">
                                <div class="d-flex align-items-center justify-content-center my-3 mb-4">
                                    <button class="arrow-btn me-3" @onclick="PreviousDay">
                                        <i class="bi bi-chevron-left fs-4"></i>
                                    </button>

                                    <div class="d-flex flex-column align-items-center">
                                        <strong>@selectedDate.ToString("dddd")</strong>
                                        <input type="date" class="form-control text-center"
                                               style="max-width: 200px;"
                                               value="@selectedDate.ToString("yyyy-MM-dd")"
                                               @onchange="OnDateTimeChanged"/>
                                    </div>

                                    <button class="arrow-btn ms-3" @onclick="NextDay">
                                        <i class="bi bi-chevron-right fs-4"></i>
                                    </button>
                                </div>
                            </div>
                            .
                            <!-- Time Selection Section -->
                            <div class="row mb-4">
                                <div class="col-md-4 mb-3">
                                    <label for="startTime" class="form-label">
                                        <i class="bi bi-clock"></i> Start Time:
                                    </label>
                                    <input type="time"
                                           class="form-control"
                                           id="startTime"
                                           @bind="startTime"
                                           @bind:event="oninput"/>
                                </div>

                                <div class="col-md-4 mb-3">
                                    <label for="endTime" class="form-label">
                                        <i class="bi bi-clock-fill"></i> End Time:
                                    </label>
                                    <input type="time"
                                           class="form-control"
                                           id="endTime"
                                           @bind="endTime"
                                           @bind:event="oninput"/>
                                </div>

                                <div class="col-md-4 mb-3">
                                    <label for="guests" class="form-label">
                                        <i class="bi bi-people"></i> Number of Guests:
                                    </label>
                                    <input type="number"
                                           class="form-control"
                                           id="guests"
                                           @bind="numberOfGuests"
                                           min="1"
                                           max=99/>
                                </div>
                            </div>


                        </div>
                    </div>


                    <div class="row mb-4">

                        @if (selectedDate != null && startTime != null && endTime != null)
                        {
                            <button class="base-button" @onclick="CheckAvailability" disabled="@isCheckingAvailability">
                                @if (isCheckingAvailability)
                                {
                                    <span>Checking...</span>
                                }
                                else
                                {
                                    <i class="bi bi-calendar-event me-2"></i>
                                    <span> Check Available Tables</span>
                                }
                            </button>
                        }

                        @if (availableTables != null)
                        {
                            <hr class="my-4">
                            <div class="available-tables">
                                <h3>Available Tables</h3>
                                @if (!availableTables.Any())
                                {
                                    <div class="alert alert-info alert-dismissible fade show mt-3" role="alert">
                                        <i class="bi bi-check-circle-fill me-2"></i>
                                        No tables available for selected date and time. Please try different time.
                                        <button type="button" class="btn-close" data-bs-dismiss="alert"  aria-label="Close"></button>
                                    </div>
                                }
                                else
                                {
                                    <div class="row g-3">
                                        @foreach (var table in availableTables.OrderBy(t => t.TableNumber))
                                        {
                                            <div class="col-12 col-sm-6 col-md-4 col-lg-3"
                                                 @onclick="() => selectedTableId = table.Id">
                                                <TableComponent Table="table" isSelected="(table.Id == selectedTableId)" />
                                            </div>
                                        }
                                    </div>

                                    @if (selectedTableId > 0)
                                    {
                                        <hr class="my-4">
                                        <h4 class="mb-3 text-center">Customer Information</h4>

                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="name" class="form-label">
                                                    <i class="bi bi-person"></i> Name:
                                                    <span
                                                        class="text-danger">*</span>
                                                </label>
                                                <input type="text"
                                                       class="form-control"
                                                       id="name"
                                                       @bind="customerName"
                                                       placeholder="Your name"
                                                       required/>
                                            </div>

                                            <div class="col-md-6 mb-3">
                                                <label for="phone" class="form-label">
                                                    <i class="bi bi-telephone"></i> Phone:
                                                    <span
                                                        class="text-danger">*</span>
                                                </label>
                                                <input type="tel"
                                                       class="form-control"
                                                       id="phone"
                                                       @bind="customerPhone"
                                                       placeholder="+48 123 456 789"
                                                       required/>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            <label for="email" class="form-label">
                                                <i class="bi bi-envelope"></i> Email: <span class="text-danger">*</span>
                                            </label>
                                            <input type="email"
                                                   class="form-control"
                                                   id="email"
                                                   @bind="customerEmail"
                                                   placeholder="your.email@example.com"
                                                   required/>
                                        </div>

                                        <div class="mb-4">
                                            <label for="notes" class="form-label">
                                                <i class="bi bi-chat-text"></i> Special Requests (optional):
                                            </label>
                                            <textarea class="form-control"
                                                      id="notes"
                                                      @bind="specialRequests"
                                                      rows="3"
                                                      placeholder="Any dietary restrictions, special occasions, or other requests..."></textarea>
                                        </div>


                                        @if (!string.IsNullOrEmpty(customerName) && !string.IsNullOrEmpty(customerEmail) && !string.IsNullOrEmpty(customerPhone) || currentUser != null)
                                        {
                                            <div class="row mb-4">
                                                <button class="base-button" @onclick="MakeReservation"
                                                        disabled="@isSubmitting">
                                                    @if (isSubmitting)
                                                    {
                                                        <span>Processing...</span>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-check2-circle me-2"></i>
                                                        <span> Confirm Reservation</span>
                                                    }
                                                </button>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .arrow-btn {
        background-color: transparent;
        border: none;
        color: #6c757d; /* szary jak secondary */
        transition: color 0.2s, transform 0.1s;
        padding: 6px 10px;
        cursor: pointer;
    }

    .arrow-btn:active {
        color: #ffffff; /* np. niebieski przy kliknięciu */
        transform: scale(0.95); /* delikatny efekt wciśnięcia */
    }

    .arrow-btn:focus {
        outline: none;
        box-shadow: none;
    }

</style>

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public Restaurant? restaurant { get; set; }

    [Inject] public JwtAuthenticationStateProvider AuthStateProvider { get; set; } = default!;


    private bool reservationNeedConfirmation = false;
    private List<Table>? allTables;
    private List<Table>? availableTables;

    private DateTime selectedDate = DateTime.Now.Date;
    private DateTime startTime = DateTime.Now;
    private DateTime endTime = DateTime.Now.AddHours(1);
    private int numberOfGuests = 2;
    private int selectedTableId = 0;
    ResponseUserDto? currentUser = new ResponseUserDto();

    private string customerName = "";
    private string customerEmail = "";
    private string customerPhone = "";
    private string specialRequests = "";
    private string userId = "";

    private bool isLoadingRestaurant = false;
    private bool isCheckingAvailability = false;
    private bool isSubmitting = false;

    private string errorMessage = "";
    private string successMessage = "";

    protected async override Task OnParametersSetAsync()
    {
        await LoadRestaurantData();
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            currentUser = await Http.GetFromJsonAsync<ResponseUserDto>("api/Auth/me");
            if (currentUser != null)
            {
                customerName = currentUser.FirstName + " " + currentUser.LastName;
                customerEmail = currentUser.Email;
                customerPhone = currentUser.PhoneNumber;
                userId = currentUser.Id;
            }
        }
        else
        {
            currentUser = null;
        }
    }

    private async Task LoadRestaurantData()
    {
        try
        {
            isLoadingRestaurant = true;
            restaurant = await Http.GetFromJsonAsync<Restaurant>($"api/Restaurant/{Id}");
            allTables = await Http.GetFromJsonAsync<List<Table>>($"api/Table/restaurant/{Id}");
            reservationNeedConfirmation = await Http.GetFromJsonAsync<bool>($"/api/RestaurantSettings/{Id}/needs-confirmation");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading restaurant data: {ex.Message}");
            restaurant = null;
        }
        finally
        {
            isLoadingRestaurant = false;
        }
    }

    private void OnDateTimeChanged()
    {
        // Reset available tables when date/time changes
        availableTables = null;
        selectedTableId = 0;
        errorMessage = "";
        successMessage = "";
    }

    private async Task PreviousDay()
    {
        selectedDate = selectedDate.AddDays(-1);
        OnDateTimeChanged();
    }

    private async Task NextDay()
    {
        selectedDate = selectedDate.AddDays(1);
        OnDateTimeChanged();
    }

    private async Task CheckAvailability()
    {
        if (selectedDate == null || startTime == null || endTime == null || allTables == null)
            return;

        try
        {
            isCheckingAvailability = true;
            errorMessage = "";
            successMessage = "";

            // Validate end time is after start time
            if (endTime <= startTime)
            {
                errorMessage = "End time must be after start time.";
                availableTables = new List<Table>();
                return;
            }

            // Create TimeOnly from DateTime
            var startTimeOnly = TimeOnly.FromDateTime(startTime);
            var endTimeOnly = TimeOnly.FromDateTime(endTime);

            // Check if the restaurant is open at this time
            var dayOfWeek = selectedDate.DayOfWeek;
            var openingHours = restaurant?.OpeningHours?.FirstOrDefault(h => h.DayOfWeek == dayOfWeek);

            if (openingHours != null && openingHours.IsClosed)
            {
                errorMessage = "Restaurant is closed on this day.";
                availableTables = new List<Table>();
                return;
            }

            if (openingHours != null && (startTimeOnly < openingHours.OpenTime || endTimeOnly > openingHours.CloseTime))
            {
                errorMessage = $"Restaurant is open from {openingHours.OpenTime:HH:mm} to {openingHours.CloseTime:HH:mm} on {dayOfWeek}.";
                availableTables = new List<Table>();
                return;
            }

            // Check each table for availability
            var availableTablesList = new List<Table>();

            foreach (var table in allTables.Where(t => t.Capacity >= numberOfGuests))
            {
                var isAvailable = await IsTableAvailable(table.Id, selectedDate, startTimeOnly, endTimeOnly);
                if (isAvailable)
                {
                    availableTablesList.Add(table);
                }
            }

            availableTables = availableTablesList;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error checking availability: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isCheckingAvailability = false;
        }
    }

    private async Task<bool> IsTableAvailable(int tableId, DateTime date, TimeOnly startTime, TimeOnly endTime)
    {
        try
        {
            var reservations = await Http.GetFromJsonAsync<List<ReservationBase>>($"api/Reservation/reservation/table/{tableId}");

            if (reservations == null || !reservations.Any())
                return true;

            // Check if there's any overlapping reservation on the same date
            foreach (var reservation in reservations)
            {
                // Skip cancelled reservations
                if (reservation.Status == ReservationStatus.Cancelled)
                    continue;

                // Check if it's the same date
                if (reservation.ReservationDate.Date != date.Date)
                    continue;

                // Check for time overlap
                if (startTime < reservation.EndTime && endTime > reservation.StartTime)
                {
                    return false; // Table is not available
                }
            }

            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking table {tableId} availability: {ex.Message}");
            return false;
        }
    }

    private void SelectTable(int tableId)
    {
        selectedTableId = tableId;
    }

    private async Task MakeReservation()
    {
        if (selectedTableId <= 0 || selectedDate == null || startTime == null || endTime == null)
            return;

        try
        {
            isSubmitting = true;
            errorMessage = "";
            successMessage = "";

            if (currentUser != null)
            {
                customerName = $"{currentUser.FirstName} {currentUser.LastName}";
                customerEmail = currentUser.Email;
                customerPhone = currentUser.PhoneNumber ?? "";
                userId = currentUser.Id;
            }

            var reservation = new TableReservationDto
            {
                TableId = selectedTableId,
                RestaurantId = Id,
                CustomerName = customerName,
                CustomerEmail = customerEmail,
                CustomerPhone = customerPhone,
                ReservationDate = DateTime.SpecifyKind(selectedDate, DateTimeKind.Utc),
                StartTime = TimeOnly.FromDateTime(startTime),
                EndTime = TimeOnly.FromDateTime(endTime),
                NumberOfGuests = numberOfGuests,
                Notes = specialRequests,
                requiresConfirmation = restaurant.Settings.ReservationsNeedConfirmation,
                UserId = userId // This should be replaced with actual user ID from authentication
            };

            var response = await Http.PostAsJsonAsync("api/Reservation/table", reservation);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Reservation confirmed! You will receive a confirmation email shortly.";

                // Clear form after successful reservation
                await Task.Delay(2000);
                Navigation.NavigateTo($"/restaurant/{Id}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to make reservation: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error making reservation: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/restaurant/{Id}");
    }

}
