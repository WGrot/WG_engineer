@using RestaurantApp.Blazor.Extensions
@using RestaurantApp.Blazor.Models.DTO
@using RestaurantApp.Shared.Models
@using RestaurantApp.Blazor.Components

@if (restaurant != null)
{
    <div class="container-fluid py-4">
        <div class="row g-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(restaurant.Address))
                        {
                            <h5 class="card-title mb-3">
                                <i class="bi bi-geo-alt-fill text-secondary"></i> Address
                            </h5>
                            <p class="card-text">
                                <i class="bi bi-pin-map"></i> @restaurant.Address
                            </p>
                        }

                        @if (!string.IsNullOrEmpty(restaurant.Description))
                        {
                            <h5 class="card-title mb-3">
                                <i class="bi bi-info-circle-fill text-secondary"></i> About
                            </h5>
                            <p class="card-text">@restaurant.Description</p>
                        }

                        @if (restaurant.OpeningHours != null && restaurant.OpeningHours.Any())
                        {
                            <h5 class="card-title mb-3">
                                <i class="bi bi-clock-fill text-secondary"></i> Opening Hours
                            </h5>
                            <div class="list-group list-group-flush">
                                @foreach (var hours in restaurant.OpeningHours.OrderBy(h => h.DayOfWeek))
                                {
                                    <div
                                        class="list-group-item d-flex border-0 justify-content-left align-items-center px-0">
                                        <span class="fw-bold me-3">@hours.DayOfWeek              </span>
                                        @if (hours.IsClosed)
                                        {
                                            <span class="badge bg-secondary">Closed</span>
                                        }
                                        else
                                        {
                                            <span class="text-success">
                                                 @hours.OpenTime.ToString("HH:mm") - @hours.CloseTime.ToString( "HH:mm")
                                            </span>
                                        }
                                    </div>
                                }
                            </div>
                        }

                    </div>
                </div>
            </div>

            @if (restaurant.photosThumbnailsUrls != null && restaurant.photosThumbnailsUrls.Any())
            {
                <div class="col-12">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title mb-3">
                                <i class="bi bi-images"></i> Photos
                            </h5>
                            <div class="d-flex flex-wrap gap-2">
                                @for (int i = 0; i < restaurant.photosThumbnailsUrls.Count; i++)
                                {
                                    var index = i; // capture variable
                                    <img src="@restaurant.photosThumbnailsUrls[index]"
                                         class="rounded shadow-sm"
                                         alt="Restaurant photo"
                                         style="cursor: pointer; object-fit: cover; height: 120px; width: 120px;"
                                         @onclick="() => OpenPhotoModal(index)">
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }


        </div>
    </div>

    <GenericModal @bind-IsVisible="showPhotoModal"
                  Size="GenericModal.ModalSize.Large">
        <ChildContent>
            @if (selectedPhotoUrl != null)
            {
                <div class="d-flex justify-content-center align-items-center" 
                     style="height: 70vh; max-height: 600px; min-height: 400px;">
                    <img src="@selectedPhotoUrl"
                         style="width: 100%; 
                            height: 100%; 
                            object-fit: contain;"
                         class="rounded shadow-sm"
                         alt="Restaurant photo">
                </div>
            }
        </ChildContent>
        <FooterContent>
            <div class="d-flex justify-content-between w-100">
                <button class="btn btn-primary"
                        disabled="@(selectedPhotoIndex < 1)"
                        @onclick="() => OpenPhotoModal(selectedPhotoIndex - 1)">
                    Previous
                </button>

                <button class="btn btn-primary"
                        disabled="@(selectedPhotoIndex >= restaurant.photosUrls.Count - 1)"
                        @onclick="() => OpenPhotoModal(selectedPhotoIndex + 1)">
                    Next
                </button>
            </div>
        </FooterContent>
    </GenericModal>
}
else
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 text-muted">Ładowanie danych restauracji...</p>
    </div>
}
