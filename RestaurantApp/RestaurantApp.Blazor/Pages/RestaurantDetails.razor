@page "/restaurant/{id:int}"
@using RestaurantApp.Shared.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="restaurant-details-container">
    @if (isLoading)
    {
        <div class="loading">
            <p>Loading restaurant details...</p>
        </div>
    }
    else if (restaurant == null)
    {
        <div class="error">
            <h2>Restaurant not found</h2>
            <p>The restaurant you're looking for could not be found.</p>
            <button @onclick="GoBack">Go Back</button>
        </div>
    }
    else
    {
        <div class="restaurant-info">
            <h1>@restaurant.Name</h1>
            <p><strong>Address:</strong> @restaurant.Address</p>

            @if (restaurant.OpeningHours != null && restaurant.OpeningHours.Any())
            {
                <div class="opening-hours">
                    <h3>Opening Hours</h3>
                    @foreach (var hours in restaurant.OpeningHours.OrderBy(h => h.DayOfWeek))
                    {
                        <div class="hours-item">
                            <span><strong>@hours.DayOfWeek:</strong></span>
                            @if (hours.IsClosed)
                            {
                                <span>Closed</span>
                            }
                            else
                            {
                                <span>@hours.OpenTime.ToString("HH:mm") - @hours.CloseTime.ToString("HH:mm")</span>
                            }
                        </div>
                    }
                </div>
            }

            @if (restaurant.Menu != null)
            {
                <div class="menu-section">
                    <h3 @onclick="ToggleMenuSection" style="cursor: pointer;">
                        Menu
                        <span>@(showMenu ? "▼" : "▶")</span>
                    </h3>

                    @if (showMenu)
                    {
                        @if (isLoadingMenu)
                        {
                            <p>Loading menu...</p>
                        }
                        else if (menu == null)
                        {
                            <p>Menu not available for this restaurant.</p>
                        }
                        else
                        {
                            <div class="menu-content">
                                <h4>@menu.Name</h4>
                                @if (!string.IsNullOrEmpty(menu.Description))
                                {
                                    <p>@menu.Description</p>
                                }

                                @if (menu.Items != null && menu.Items.Any())
                                {
                                    <div class="menu-items">
                                        @foreach (var item in menu.Items)
                                        {
                                            <div class="menu-item">
                                                <div class="item-header">
                                                    <strong>@item.Name</strong>
                                                    <span class="item-price">@item.Price.Price.ToString("F2") @item.Price.CurrencyCode</span>
                                                </div>
                                                @if (!string.IsNullOrEmpty(item.Description))
                                                {
                                                    <p class="item-description">@item.Description</p>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <p>No items available in this menu.</p>
                                }
                            </div>
                        }
                    }
                </div>
            }

            <div class="tables-section">
                <h3 @onclick="ToggleTablesSection" style="cursor: pointer;">
                    Tables (@(tables?.Count ?? 0))
                    <span>@(showTables ? "▼" : "▶")</span>
                </h3>

                @if (showTables)
                {
                    @if (isLoadingTables)
                    {
                        <p>Loading tables...</p>
                    }
                    else if (tables == null || !tables.Any())
                    {
                        <p>No tables available for this restaurant.</p>
                    }
                    else
                    {
                        <div class="tables-list">
                            @foreach (var table in tables)
                            {
                                <div class="table-item">
                                    <p><strong>Table @table.TableNumber</strong></p>
                                    <p>Capacity: @table.Capacity people</p>
                                    @if (!string.IsNullOrEmpty(table.Location))
                                    {
                                        <p>Location: @table.Location</p>
                                    }
                                    @if (table.Seats != null && table.Seats.Any())
                                    {
                                        <p>Seats: @table.Seats.Count</p>
                                    }
                                </div>
                            }
                        </div>
                    }
                }
            </div>

            <div class="actions">
                <button @onclick="BookTable">Book Table</button>
                <button @onclick="GoBack">Go Back</button>
            </div>
            @if (restaurant.photosUrls != null && restaurant.photosUrls.Any())
            {
                @foreach (string imageUrl in restaurant.photosUrls)
                {
                    <img src="@imageUrl" 
                         alt="@restaurant.Name" />
                }
            }

        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    private Restaurant? restaurant;
    private List<Table>? tables;
    private Menu? menu;
    private bool isLoading = false;
    private bool isLoadingTables = false;
    private bool isLoadingMenu = false;
    private bool showTables = false;
    private bool showMenu = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRestaurant();
    }

    private async Task LoadRestaurant()
    {
        try
        {
            isLoading = true;
            restaurant = await Http.GetFromJsonAsync<Restaurant>($"api/Restaurant/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading restaurant: {ex.Message}");
            restaurant = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadTables()
    {
        if (tables != null) return; // Already loaded

        try
        {
            isLoadingTables = true;
            tables = await Http.GetFromJsonAsync<List<Table>>($"api/Table/restaurant/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tables: {ex.Message}");
            tables = new List<Table>();
        }
        finally
        {
            isLoadingTables = false;
        }
    }

    private async Task LoadMenu()
    {
        if (menu != null) return; // Already loaded

        try
        {
            isLoadingMenu = true;
            menu = await Http.GetFromJsonAsync<Menu>($"api/Menu/restaurant/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading menu: {ex.Message}");
            menu = null;
        }
        finally
        {
            isLoadingMenu = false;
        }
    }

    private async Task ToggleTablesSection()
    {
        showTables = !showTables;

        if (showTables && tables == null)
        {
            await LoadTables();
        }
    }

    private async Task ToggleMenuSection()
    {
        showMenu = !showMenu;

        if (showMenu && menu == null)
        {
            await LoadMenu();
        }
    }

    private void BookTable()
    {
        Navigation.NavigateTo($"/booking/table/{Id}");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/restaurants");
    }
}