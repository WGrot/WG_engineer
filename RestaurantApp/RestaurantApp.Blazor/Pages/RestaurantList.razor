@page "/Restaurants"
@page "/Restaurants/search"
@using RestaurantApp.Shared.Models
@using System.Net.Http.Json
@using RestaurantApp.Blazor.Components
@using RestaurantApp.Shared.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="restaurants-container">
    <div class="search-header">
        <div class="search-header-content">
            <h1>Restaurants</h1>
            
            <div class="search-filters">
                <div class="filter-box">
                    <div class="filter-input-group">
                        <i class="bi bi-search"></i>
                        <input type="text"
                               placeholder="Search restaurants..."
                               @bind="searchName"
                               @bind:event="oninput"/>
                    </div>
                    
                    <div class="filter-input-group">
                        <i class="bi bi-geo-alt"></i>
                        <input type="text"
                               placeholder="Location..."
                               @bind="searchLocation"
                               @bind:event="oninput"/>
                    </div>
                    
                    <button class="filter-button" @onclick="PerformSearch">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>


    <div class="restaurants-content">
        @if (isInitialLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>Loading restaurants...</p>
            </div>
        }
        else if (displayedRestaurants == null || !displayedRestaurants.Any())
        {
            <div class="no-results">
                <i class="bi bi-search" style="font-size: 3rem; color: #999;"></i>
                <h3>No restaurants found</h3>
                <p>Try adjusting your search criteria</p>
                <button class="btn-primary" @onclick="ClearSearch">Clear filters</button>
            </div>
        }
        else
        {
            <div class="d-flex flex-row justify-content-between">
                <div class="results-info">
                    <p>Found <strong>@displayedRestaurants.Count()</strong> restaurant(s) @(!string.IsNullOrEmpty(searchName) || !string.IsNullOrEmpty(searchLocation) ? "matching your criteria" : "")</p>
                </div>
                <div class="d-flex flex-row justify-content-end">
                    <div class="dropdown me-2">
                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle"
                                type="button"
                                data-bs-toggle="dropdown">
                            Restaurants per page: @pageSize
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" @onclick='() => SetPageSize(10)'>10</a></li>
                            <li><a class="dropdown-item" @onclick='() => SetPageSize(25)'>25</a></li>
                            <li><a class="dropdown-item" @onclick='() => SetPageSize(50)'>50</a></li>

                        </ul>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle"
                                type="button"
                                data-bs-toggle="dropdown">
                            <i class="bi bi-funnel me-1"></i>Sort by: @char.ToUpper(sortOption[0])@sortOption.Substring(1)
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" @onclick='() => SortRestaurants("name_ascending")'>A-z</a></li>
                            <li><a class="dropdown-item" @onclick='() => SortRestaurants("name_descending")'>Z-a</a></li>
                            <li><a class="dropdown-item" @onclick='() => SortRestaurants("best")'>Highest Rating</a></li>
                            <li><a class="dropdown-item" @onclick='() => SortRestaurants("worst")'>Lowest Rating</a></li>
                        </ul>
                    </div>

                </div>
                
            </div>

            
            <div class="restaurants-grid">
                @foreach (var restaurant in displayedRestaurants)
                {
                    <div class="restaurant-card" @onclick="() => NavigateToRestaurant(restaurant.Id)">
                        <div class="restaurant-image">
                            <img src="@restaurant.profileUrl" 
                                 alt="@restaurant.Name" />
                        </div>
                        
                        <div class="restaurant-info">
                            <h3 class="restaurant-name mb-1">@restaurant.Name</h3>
                            <StarRating 
                                Restaurant="restaurant"
                                StarColor="var(--primary-color)"
                                EmptyStarColor="var(--primary-color)"
                                TextColor="#555"
                                StarSize="1.5rem" />
                            <div class="restaurant-details">
                                <div class="detail-item">
                                    <i class="bi bi-geo-alt-fill"></i>
                                    <span>@restaurant.Address</span>
                                </div>
                                
                                @if (restaurant.OpeningHours != null && restaurant.OpeningHours.Any())
                                {
                                    var todayHours = GetTodayHours(restaurant);
                                    <div class="detail-item">
                                        <i class="bi bi-clock"></i>
                                        @if (todayHours != null && !todayHours.IsClosed)
                                        {
                                            <span class="@(IsOpenNow(restaurant) ? "text-success" : "text-danger")">
                                                @(IsOpenNow(restaurant) ? "Open now" : "Closed") 
                                                • @todayHours.OpenTime.ToString("HH:mm") - @todayHours.CloseTime.ToString("HH:mm")
                                            </span>
                                        }
                                        else if (todayHours?.IsClosed == true)
                                        {
                                            <span class="text-danger">Closed today</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Hours not available</span>
                                        }
                                    </div>
                                }
                                
                                @if (restaurant.Menu != null)
                                {
                                    <div class="detail-item">
                                        <i class="bi bi-journal-text"></i>
                                        <span>Menu available</span>
                                    </div>
                                }
                            </div>
                            
                            <div class="restaurant-actions">
                                <button class="btn-book" @onclick:stopPropagation="true" @onclick="() => BookTable(restaurant.Id)">
                                    <i class="bi bi-calendar-check"></i>
                                    Book Table
                                </button>
                                <button class="btn-view" @onclick:stopPropagation="true" @onclick="() => NavigateToRestaurant(restaurant.Id)">
                                    View Details
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            @if (hasMoreRestaurants)
            {
                <div class="text-center mt-3">
                    <button class="btn-outline-primary"
                            @onclick="LoadMoreRestaurants"
                            disabled="@isLoadingMore">
                        @if (isLoadingMore)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Loading...</span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-down-circle me-2"></i>
                            <span>Load More restaurants</span>
                        }
                    </button>
                </div>
            }
            else
            {
                <div class="text-center mt-3 text-muted">
                    <i class="bi bi-check-circle me-2"></i>
                    All Restaurants loaded
                </div>
            }
        }
    </div>
</div>


@code {
    private List<Restaurant> displayedRestaurants = new List<Restaurant>();
    private bool isLoadingMore = false;
    private string searchName = "";
    private string searchLocation = "";
    private bool isInitialLoading { get; set; } = true;
    private string sortOption { get; set; } = "best";
    private int currentPage = 1;
    private int pageSize = 20;
    bool hasMoreRestaurants = true;
    
    
    protected override async Task OnInitializedAsync()
    {
        // Pobierz parametry z query string
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
        searchName = query["name"] ?? "";
        searchLocation = query["location"] ?? "";
        
        await LoadInitialRestaurants();
    }

    private async Task LoadInitialRestaurants()
    {
        isInitialLoading = true;
        displayedRestaurants.Clear();
        currentPage = 1;

        try
        {
            await LoadRestaurantsPage();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading displayedRestaurants: {ex.Message}");
            displayedRestaurants = new List<Restaurant>();
        }
        finally
        {
            isInitialLoading = false;
        }
    }
    
    private async Task LoadRestaurantsPage()
    {
        try
        {
            
            var queryParams = new List<string>();
            
            if (!string.IsNullOrWhiteSpace(searchName))
                queryParams.Add($"name={Uri.EscapeDataString(searchName)}");
            
            if (!string.IsNullOrWhiteSpace(searchLocation))
                queryParams.Add($"address={Uri.EscapeDataString(searchLocation)}");
            
            queryParams.Add($"page={currentPage}");
            queryParams.Add($"pageSize={pageSize}");
            queryParams.Add($"sortBy={sortOption}");
            
            var queryString = queryParams.Any() ? "?" + string.Join("&", queryParams) : "";
            
            var response = await Http.GetFromJsonAsync<PaginatedRestaurantsDto>($"api/Restaurant/search{queryString}");
            if (response!= null)
            {
                displayedRestaurants.AddRange(response.Restaurants);
                hasMoreRestaurants = response.HasMore;
            }
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading displayedRestaurants: {ex.Message}");
            displayedRestaurants = new List<Restaurant>();
        }
        finally
        {
            isLoadingMore = false;
        }
    }
    
    private async Task LoadMoreRestaurants()
    {
        if (isLoadingMore || !hasMoreRestaurants) return;

        isLoadingMore = true;
        currentPage++;

        try
        {
            await LoadRestaurantsPage();
        }
        catch (Exception ex)
        {
            currentPage--; // Cofnij stronę w przypadku błędu
        }
        finally
        {
            isLoadingMore = false;
        }
    }
    
    private async Task SortRestaurants(string option)
    {
        if (sortOption == option) return;

        sortOption = option.ToLower();
        await LoadInitialRestaurants();
    }
    
    private async Task SetPageSize(int size)
    {
        pageSize = size;
        await LoadInitialRestaurants();
    }

    private async Task PerformSearch()
    {
        displayedRestaurants.Clear();
        var queryParams = new List<string>();
        
        if (!string.IsNullOrWhiteSpace(searchName))
            queryParams.Add($"name={Uri.EscapeDataString(searchName)}");
        
        if (!string.IsNullOrWhiteSpace(searchLocation))
            queryParams.Add($"location={Uri.EscapeDataString(searchLocation)}");
        
        var queryString = queryParams.Any() ? "?" + string.Join("&", queryParams) : "";
        
        Navigation.NavigateTo($"/Restaurants{queryString}");
        await LoadRestaurantsPage();
    }

    private async Task ClearSearch()
    {
        searchName = "";
        searchLocation = "";
        Navigation.NavigateTo("/displayedRestaurants");
        await LoadRestaurantsPage();
    }

    private void NavigateToRestaurant(int restaurantId)
    {
        Navigation.NavigateTo($"/restaurant/{restaurantId}");
    }

    private void BookTable(int restaurantId)
    {
        Navigation.NavigateTo($"/booking/table/{restaurantId}");
    }

    private bool IsOpenNow(Restaurant restaurant)
    {
        if (restaurant.OpeningHours == null || !restaurant.OpeningHours.Any())
            return false;
        
        var now = DateTime.Now;
        var currentDay = now.DayOfWeek;
        var currentTime = TimeOnly.FromDateTime(now);
        
        // Znajdź godziny otwarcia dla dzisiejszego dnia
        var todayHours = restaurant.OpeningHours
            .FirstOrDefault(h => h.DayOfWeek == currentDay);
        
        if (todayHours == null)
            return false;
        
        // Użyj metody IsOpenAt z modelu OpeningHours
        return todayHours.IsOpenAt(currentTime);
    }
    
    private OpeningHours? GetTodayHours(Restaurant restaurant)
    {
        if (restaurant.OpeningHours == null || !restaurant.OpeningHours.Any())
            return null;
            
        var currentDay = DateTime.Now.DayOfWeek;
        return restaurant.OpeningHours.FirstOrDefault(h => h.DayOfWeek == currentDay);
    }
}