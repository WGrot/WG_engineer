@page "/restaurant/edit/{Id:int}"
@using RestaurantApp.Blazor.Models.DTO
@using RestaurantApp.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="edit-container">
    <div class="edit-header">
        <div class="header-background"></div>
        <div class="header-content">
            <button class="back-button" @onclick="GoBack">
                <span class="arrow-icon">←</span> Powrót
            </button>
            <h1 class="page-title">Edycja Restauracji</h1>
            @if (restaurant != null)
            {
                <h2 class="restaurant-name">@restaurant.Name</h2>
            }
        </div>
    </div>

    @if (restaurant == null)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Ładowanie...</p>
        </div>
    }
    else
    {
        <div class="edit-content">
            <!-- Sekcja podstawowych informacji -->
            <div class="edit-card">
                <h3 class="section-title">Basic informations</h3>
                <div class="form-group">
                    <label class="form-label">Restaurant name</label>
                    <input type="text" class="form-input" @bind="restaurant.Name" />
                </div>
                <div class="form-group">
                    <label class="form-label">Address</label>
                    <input type="text" class="form-input" @bind="restaurant.Address" />
                </div>
            </div>

            <!-- Sekcja godzin otwarcia -->
            <div class="edit-card">
                <h3 class="section-title">Opening Hours</h3>
                <div class="hours-grid">
                    @foreach (var day in Enum.GetValues<DayOfWeek>())
                    {
                        var hours = GetOrCreateOpeningHours(day);
                        <div class="hours-row">
                            <div class="day-label">
                                @day
                            </div>
                            <div class="hours-controls">
                                @if (!hours.IsClosed)
                                {
                                    <input type="time" class="time-input" 
                                           value="@hours.OpenTime.ToString("HH:mm")"
                                           @onchange="(e) => UpdateOpenTime(hours, e.Value?.ToString())" />
                                    <span class="time-separator">-</span>
                                    <input type="time" class="time-input" 
                                           value="@hours.CloseTime.ToString("HH:mm")"
                                           @onchange="(e) => UpdateCloseTime(hours, e.Value?.ToString())" />
                                }
                                else
                                {
                                    <span class="closed-label">Closed</span>
                                }
                                <button class="toggle-button @(hours.IsClosed ? "closed" : "open")"
                                        @onclick="() => ToggleClosed(hours)">
                                    @(hours.IsClosed ? "Set opening hours" : "Close for the Day")
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Sekcja stolików -->
            <div class="edit-card">
                <div class="section-header">
                    <h3 class="section-title">Tables</h3>
                    <button class="add-button" @onclick="ShowAddTableForm">
                        <span class="plus-icon">+</span> Add table
                    </button>
                </div>

                @if (showAddTable)
                {
                    <div class="add-form">
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">Table number</label>
                                <input type="text" class="form-input" @bind="newTable.TableNumber" />
                            </div>
                            <div class="form-group">
                                <label class="form-label">Number of seats</label>
                                <input type="number" class="form-input" min="1" @bind="newTable.Capacity" />
                            </div>
                            <div class="form-group">
                                <label class="form-label">Localization</label>
                                <input type="text" class="form-input" @bind="newTable.Location" />
                            </div>
                        </div>
                        <div class="form-actions">
                            <button class="btn-secondary" @onclick="CancelAddTable">Cancel</button>
                            <button class="btn-primary" @onclick="AddTable">Add</button>
                        </div>
                    </div>
                }

                <div class="tables-grid">
                    @if (tables != null && tables.Any())
                    {
                        @foreach (var table in tables)
                        {
                            <div class="table-card">
                                <div class="table-header">
                                    <span class="table-number">Table @table.TableNumber</span>
                                    <button class="delete-button" @onclick="() => DeleteTable(table)">
                                        <span class="delete-icon">×</span>
                                    </button>
                                </div>
                                <div class="table-info">
                                    <div class="info-row">
                                        <span class="info-label">Seats:</span>
                                        <span class="info-value">@table.Capacity</span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(table.Location))
                                    {
                                        <div class="info-row">
                                            <span class="info-label">Localization:</span>
                                            <span class="info-value">@table.Location</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="empty-state">
                            <p>No tables configured please add some</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Przyciski akcji -->
            <div class="action-buttons">
                <button class="btn-cancel" @onclick="GoBack">Cancel</button>
                <button class="btn-save" @onclick="SaveChanges">
                    <span class="save-icon">✓</span> Save Changes
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    private Restaurant? restaurant;
    private List<Table> tables = new();
    private Table newTable = new();
    private bool showAddTable = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadRestaurant();
        await LoadTables();
    }

    private async Task LoadRestaurant()
    {
        try
        {
            restaurant = await Http.GetFromJsonAsync<Restaurant>($"api/restaurant/{Id}");
            
            if (restaurant.OpeningHours.Count != 7)
            {
                restaurant.OpeningHours.Clear();
                foreach (var day in Enum.GetValues<DayOfWeek>())
                {
                    restaurant.OpeningHours.Add(new OpeningHours
                    {
                        DayOfWeek = day,
                        OpenTime = new TimeOnly(10, 0),
                        CloseTime = new TimeOnly(22, 0),
                        IsClosed = day == DayOfWeek.Sunday,
                        RestaurantId = restaurant.Id
                    });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading restaurant: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadTables()
    {
        try
        {
            tables = await Http.GetFromJsonAsync<List<Table>>($"api/Table/restaurant/{Id}");
            if (tables == null)
            {
                tables = new List<Table>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tables: {ex.Message}");
        }
    }

    private OpeningHours GetOrCreateOpeningHours(DayOfWeek day)
    {
        var hours = restaurant?.OpeningHours?.FirstOrDefault(h => h.DayOfWeek == day);
        if (hours == null && restaurant != null)
        {
            hours = new OpeningHours
            {
                DayOfWeek = day,
                OpenTime = new TimeOnly(10, 0),
                CloseTime = new TimeOnly(22, 0),
                RestaurantId = restaurant.Id
            };
            restaurant.OpeningHours ??= new List<OpeningHours>();
            restaurant.OpeningHours.Add(hours);
        }
        return hours!;
    }

    private void UpdateOpenTime(OpeningHours hours, string? timeString)
    {
        if (TimeOnly.TryParse(timeString, out var time))
        {
            hours.OpenTime = time;
        }
    }

    private void UpdateCloseTime(OpeningHours hours, string? timeString)
    {
        if (TimeOnly.TryParse(timeString, out var time))
        {
            hours.CloseTime = time;
        }
    }

    private void ToggleClosed(OpeningHours hours)
    {
        hours.IsClosed = !hours.IsClosed;
    }

    private void ShowAddTableForm()
    {
        showAddTable = true;
        newTable = new Table { RestaurantId = Id, Capacity = 2 };
    }

    private void CancelAddTable()
    {
        showAddTable = false;
        newTable = new Table();
    }

    private async Task AddTable()
    {
        if (string.IsNullOrWhiteSpace(newTable.TableNumber))
        {
            return;
        }

        try
        {
            // Przygotuj DTO zgodne z oczekiwaniami endpointu
            var createTableDto = new CreateTableDto
            {
                TableNumber = newTable.TableNumber,
                Capacity = newTable.Capacity,
                Location = newTable.Location,
                RestaurantId = Id,
                SeatCount = newTable.Capacity // Ustaw SeatCount na podstawie Capacity
            };

            var response = await Http.PostAsJsonAsync("api/table", createTableDto);
        
            if (response.IsSuccessStatusCode)
            {
                var createdTable = await response.Content.ReadFromJsonAsync<Table>();
                if (createdTable != null)
                {
                    tables.Add(createdTable);
                }
            }
            else
            {
                // Wyświetl szczegóły błędu
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding table: {ex.Message}");
        }
    
        showAddTable = false;
        newTable = new Table();
    }

    private async Task DeleteTable(Table table)
    {
        tables.Remove(table);
        
        await Http.DeleteAsync($"api/table/{table.Id}");
    }

    private async Task SaveChanges()
    {
        // Tu byłoby wywołanie API do zapisu wszystkich zmian
        await Task.Delay(500); // Symulacja zapisu
        
        // Przekierowanie z powrotem do listy lub szczegółów
        Navigation.NavigateTo("/restaurants");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/restaurants");
    }
}