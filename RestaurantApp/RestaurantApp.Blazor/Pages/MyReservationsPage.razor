@page "/my-reservations"
@using RestaurantApp.Shared.Models
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using RestaurantApp.Blazor.Models.DTO
@attribute [Authorize]
@inject HttpClient Http

<h1>My Reservations</h1>

@if (isLoading)
{
    <p>Loading reservations...</p>
}
else if (error != null)
{
    <p>Error: @error</p>
}
else if (reservations == null || !reservations.Any())
{
    <p>You don't have any reservations yet.</p>
}
else
{
    <ul>
        @foreach (var reservation in reservations.OrderByDescending(r => r.ReservationDate))
        {
            <li>
                <div>
                    <strong>@reservation.Restaurant?.Name</strong><br />
                    Date: @reservation.ReservationDate.ToLocalTime().ToString("yyyy-MM-dd")<br />
                    Time: @reservation.StartTime.ToString("HH:mm") - @reservation.EndTime.ToString("HH:mm")<br />
                    Address: @reservation.Restaurant?.Address<br />
                    Status: @reservation.Status<br />
                    Guests: @reservation.NumberOfGuests
                </div>
                <hr />
            </li>
        }
    </ul>
}

@code {
    private List<ReservationBase>? reservations;
    private bool isLoading = true;
    private string? error;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserReservations();
    }

    private async Task LoadUserReservations()
    {
        try
        {
            
            var userDto = await Http.GetFromJsonAsync<UserDto>($"api/Auth/me");;

            if (userDto != null)
            {
                userId = userDto.Id;

                if (!string.IsNullOrEmpty(userId))
                {
                    reservations = await Http.GetFromJsonAsync<List<ReservationBase>>($"api/reservation/client/{userId}");
                }
                else
                {
                    error = "Could not retrieve user ID";
                }
            }
            else
            {
                error = "User is not authenticated";
            }
        }
        catch (Exception ex)
        {
            error = $"Failed to load reservations: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}